// Copyright 2012 Chihiro Ito. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#import "Kiwi.h"
#import "HandlerMock.h"
#import "ACAccountStore+AsyncResult.h"


@interface ACAccountStoreMock : ACAccountStore
@property (nonatomic) NSString* method;
@property (nonatomic) id handler;
- (void)requestAccessToAccountsWithType:(ACAccountType *)accountType withCompletionHandler:(ACAccountStoreRequestAccessCompletionHandler)handler;
- (void)requestAccessToAccountsWithType:(ACAccountType *)accountType options:(NSDictionary *)options completion:(ACAccountStoreRequestAccessCompletionHandler)completion;
- (void)renewCredentialsForAccount:(ACAccount *)account completion:(ACAccountStoreCredentialRenewalHandler)completionHandler;
- (void)removeAccount:(ACAccount *)account withCompletionHandler:(ACAccountStoreRemoveCompletionHandler)completionHandler;
@end

@implementation ACAccountStoreMock
- (void)requestAccessToAccountsWithType:(ACAccountType *)accountType withCompletionHandler:(ACAccountStoreRequestAccessCompletionHandler)handler
{
    self.handler = handler;
    self.method  = @"requestAccessToAccountsWithType:withCompletionHandler:";
}
- (void)requestAccessToAccountsWithType:(ACAccountType *)accountType options:(NSDictionary *)options completion:(ACAccountStoreRequestAccessCompletionHandler)completion
{
    self.handler = completion;
    self.method  = @"requestAccessToAccountsWithType:options:completion:";
}
- (void)renewCredentialsForAccount:(ACAccount *)account completion:(ACAccountStoreCredentialRenewalHandler)completionHandler
{
    self.handler = completionHandler;
    self.method  = @"renewCredentialsForAccount:completion:";
}
- (void)removeAccount:(ACAccount *)account withCompletionHandler:(ACAccountStoreRemoveCompletionHandler)completionHandler
{
    self.handler = completionHandler;
    self.method  = @"removeAccount:withCompletionHandler:";
}
@end


SPEC_BEGIN(ACAccountStoreSpec)

describe(@"AsyncResult generated by", ^{
    registerMatchers(@"AR");

    __block id<AsyncResult>     result  = nil;
    __block HandlerMock*        handler = nil;
    __block ACAccountStoreMock* mock    = nil;
    __block ACAccountType*      accType = nil;
    __block ACAccount*          account = nil;

    beforeEach(^{
        handler = [[HandlerMock alloc] init];
        mock    = [[ACAccountStoreMock alloc] init];
        accType = [mock accountTypeWithAccountTypeIdentifier:ACAccountTypeIdentifierTwitter];
        account = [[ACAccount alloc] initWithAccountType:accType];
    });

    afterEach(^{
        result  = nil;
        handler = [handler clear];
        mock    = nil;
        accType = nil;
        account = nil;
    });

    context(@"requestAccessToAccountsWithType:", ^{

        it(@"should success when twitter account access is granted", ^{
            result = [mock requestAccessToAccountsWithType:accType];
            asyncWait(result, handler.block);

            void(^callback)(BOOL, NSError*) = mock.handler;
            callback(YES, nil);

            [[handler should] beCalledWithValue:mock result:result onMainThread:YES];
            [[handler.lastCall.metadata should] equal:@{ @"accountStore":mock }];
            [[mock.method should] equal:@"requestAccessToAccountsWithType:withCompletionHandler:"];
        });

        it(@"should error when twitter account access is rejected", ^{
            result = [mock requestAccessToAccountsWithType:accType];
            asyncWait(result, handler.block);

            void(^callback)(BOOL, NSError*) = mock.handler;
            NSError* error = [[NSError alloc] initWithDomain:ACErrorDomain code:ACErrorPermissionDenied userInfo:nil];
            callback(NO, error);

            [[handler should] beCalledWithError:error result:result onMainThread:YES];
            [[handler.lastCall.metadata should] equal:@{ @"accountStore":mock }];
            [[mock.method should] equal:@"requestAccessToAccountsWithType:withCompletionHandler:"];
        });

        it(@"should error when twitter account access is rejected even without error information", ^{
            result = [mock requestAccessToAccountsWithType:accType];
            asyncWait(result, handler.block);

            void(^callback)(BOOL, NSError*) = mock.handler;
            callback(NO, nil);

            [[handler should] beCalledWithError:nil result:result onMainThread:YES];
            [[handler.lastCall.metadata should] equal:@{ @"accountStore":mock }];
            [[mock.method should] equal:@"requestAccessToAccountsWithType:withCompletionHandler:"];
        });

    });

    context(@"requestAccessToAccountsWithType:options:", ^{

        it(@"should success when twitter account access is granted", ^{
            result = [mock requestAccessToAccountsWithType:accType options:nil];
            asyncWait(result, handler.block);

            void(^callback)(BOOL, NSError*) = mock.handler;
            callback(YES, nil);

            [[handler should] beCalledWithValue:mock result:result onMainThread:YES];
            [[handler.lastCall.metadata should] equal:@{ @"accountStore":mock }];
            [[mock.method should] equal:@"requestAccessToAccountsWithType:options:completion:"];
        });

        it(@"should error when twitter account access is rejected", ^{
            result = [mock requestAccessToAccountsWithType:accType options:nil];
            asyncWait(result, handler.block);

            void(^callback)(BOOL, NSError*) = mock.handler;
            NSError* error = [[NSError alloc] initWithDomain:ACErrorDomain code:ACErrorPermissionDenied userInfo:nil];
            callback(NO, error);

            [[handler should] beCalledWithError:error result:result onMainThread:YES];
            [[handler.lastCall.metadata should] equal:@{ @"accountStore":mock }];
            [[mock.method should] equal:@"requestAccessToAccountsWithType:options:completion:"];
        });

        it(@"should error when twitter account access is rejected even without error information", ^{
            result = [mock requestAccessToAccountsWithType:accType options:nil];
            asyncWait(result, handler.block);

            void(^callback)(BOOL, NSError*) = mock.handler;
            callback(NO, nil);

            [[handler should] beCalledWithError:nil result:result onMainThread:YES];
            [[handler.lastCall.metadata should] equal:@{ @"accountStore":mock }];
            [[mock.method should] equal:@"requestAccessToAccountsWithType:options:completion:"];
        });

    });

    context(@"renewCredentialsForAccount:", ^{

        it(@"should success when the account is renewed", ^{
            result = [mock renewCredentialsForAccount:account];
            asyncWait(result, handler.block);

            void(^callback)(ACAccountCredentialRenewResult, NSError*) = mock.handler;
            callback(ACAccountCredentialRenewResultRenewed, nil);

            NSDictionary* metadata = @{ @"accountStore":mock, @"account":account, @"renewResult":[[NSNumber alloc] initWithInteger:ACAccountCredentialRenewResultRenewed] };
            [[handler should] beCalledWithValue:account result:result onMainThread:YES];
            [[handler.lastCall.metadata should] equal:metadata];
            [[mock.method should] equal:@"renewCredentialsForAccount:completion:"];
        });

        it(@"should error when renewing the account is rejected", ^{
            result = [mock renewCredentialsForAccount:account];
            asyncWait(result, handler.block);

            void(^callback)(ACAccountCredentialRenewResult, NSError*) = mock.handler;
            NSError* error = [[NSError alloc] initWithDomain:ACErrorDomain code:ACErrorPermissionDenied userInfo:nil];
            callback(ACAccountCredentialRenewResultRejected, error);

            NSDictionary* metadata = @{ @"accountStore":mock, @"account":account, @"renewResult":[[NSNumber alloc] initWithInteger:ACAccountCredentialRenewResultRejected] };
            [[handler should] beCalledWithError:error result:result onMainThread:YES];
            [[handler.lastCall.metadata should] equal:metadata];
            [[mock.method should] equal:@"renewCredentialsForAccount:completion:"];
        });

        it(@"should error when renewing the account is rejected even without error information", ^{
            result = [mock renewCredentialsForAccount:account];
            asyncWait(result, handler.block);

            void(^callback)(ACAccountCredentialRenewResult, NSError*) = mock.handler;
            callback(ACAccountCredentialRenewResultFailed, nil);

            NSDictionary* metadata = @{ @"accountStore":mock, @"account":account, @"renewResult":[[NSNumber alloc] initWithInteger:ACAccountCredentialRenewResultFailed] };
            [[handler should] beCalledWithError:nil result:result onMainThread:YES];
            [[handler.lastCall.metadata should] equal:metadata];
            [[mock.method should] equal:@"renewCredentialsForAccount:completion:"];
        });

    });

    context(@"removeAccount:", ^{

        it(@"should success when the account is deleted", ^{
            result = [mock removeAccount:account];
            asyncWait(result, handler.block);

            void(^callback)(BOOL, NSError*) = mock.handler;
            callback(YES, nil);

            [[handler should] beCalledWithValue:account result:result onMainThread:YES];
            [[handler.lastCall.metadata should] equal:@{ @"accountStore":mock, @"account":account }];
            [[mock.method should] equal:@"removeAccount:withCompletionHandler:"];
        });

        it(@"should error when renewing the account is rejected", ^{
            result = [mock removeAccount:account];
            asyncWait(result, handler.block);

            void(^callback)(BOOL, NSError*) = mock.handler;
            NSError* error = [[NSError alloc] initWithDomain:ACErrorDomain code:ACErrorAccountNotFound userInfo:nil];
            callback(NO, error);

            [[handler should] beCalledWithError:error result:result onMainThread:YES];
            [[handler.lastCall.metadata should] equal:@{ @"accountStore":mock, @"account":account }];
            [[mock.method should] equal:@"removeAccount:withCompletionHandler:"];
        });

        it(@"should error when renewing the account is rejected even without error information", ^{
            result = [mock removeAccount:account];
            asyncWait(result, handler.block);

            void(^callback)(BOOL, NSError*) = mock.handler;
            callback(NO, nil);

            [[handler should] beCalledWithError:nil result:result onMainThread:YES];
            [[handler.lastCall.metadata should] equal:@{ @"accountStore":mock, @"account":account }];
            [[mock.method should] equal:@"removeAccount:withCompletionHandler:"];
        });
        
    });

});

SPEC_END
